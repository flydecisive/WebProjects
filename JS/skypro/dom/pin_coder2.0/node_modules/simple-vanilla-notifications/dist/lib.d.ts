export declare type NotificationID = number;
export declare type NotificationContents = string | HTMLElement;
export declare type ActiveNotifications = Map<NotificationID, Notification>;
export interface NotificationOptions {
    element?: HTMLElement;
    dismissible?: boolean;
    autoDismissTimeout?: number;
    animated?: boolean;
    exitAnimationTime?: number;
}
export interface Notification {
    id: NotificationID;
    timeoutID?: ReturnType<typeof window.setTimeout> | any;
    contents: NotificationContents;
    element: HTMLElement;
    dismiss: () => void;
}
export interface NotificationManagerOptions {
    container?: HTMLElement | null;
    defaultAutoDismissTimeout?: number;
    defaultDismissible?: boolean;
    defaultAnimated?: boolean;
    defaultExitAnimationTime?: number;
}
export interface NotificationManager {
    createNotification: (contents: NotificationContents, options?: NotificationOptions) => Notification;
    dismissNotification: (notificationID: NotificationID) => void;
    dismissAllNotifications: () => void;
    destroy: () => void;
    destroyed: boolean;
    element: HTMLElement;
    activeNotifications: ActiveNotifications;
}
export declare class NotificationManagerDestroyedError extends Error {
    message: string;
}
export declare function getNextNotificationID(activeNotifications: ActiveNotifications): NotificationID;
export declare function createNotificationManager({ defaultAutoDismissTimeout, container, defaultDismissible, defaultAnimated, defaultExitAnimationTime, }?: NotificationManagerOptions): NotificationManager;
