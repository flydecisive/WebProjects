var k = Object.defineProperty;
var D = (i, t, n) => t in i ? k(i, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : i[t] = n;
var g = (i, t, n) => (D(i, typeof t != "symbol" ? t + "" : t, n), n);
class f extends Error {
  constructor() {
    super(...arguments);
    g(this, "message", "The notification manager has been destroyed, so none of the functions work any more.");
  }
}
function M(i) {
  let t = -1;
  for (const n of i.keys())
    n > t && (t = n);
  return t + 1;
}
function I({
  defaultAutoDismissTimeout: i = 3200,
  container: t,
  defaultDismissible: n = !0,
  defaultAnimated: y = !0,
  defaultExitAnimationTime: L = 350
} = {}) {
  let a = !1;
  const r = t || document.createElement("output");
  t || document.body.appendChild(r), r.classList.add("svn-notifications-container");
  const c = /* @__PURE__ */ new Map();
  function N(s, {
    element: d,
    dismissible: C = n,
    autoDismissTimeout: w = i,
    animated: v = y,
    exitAnimationTime: T = L
  } = {}) {
    if (a)
      throw new f();
    const l = M(c), e = d || document.createElement("div");
    if (e.classList.add("svn-notification"), e.setAttribute("role", "status"), e.setAttribute("aria-live", "polite"), v && e.classList.add("svn-animated"), typeof s == "string") {
      const o = document.createElement("span");
      o.classList.add("svn-notification-text"), o.innerText = s, e.appendChild(o);
    } else
      s instanceof HTMLElement && e.appendChild(s);
    let u;
    function m(o = !0) {
      window.clearTimeout(u), o && e.remove(), c.delete(l);
    }
    function p() {
      console.log("Dismissed"), v || m(), e.classList.add("svn-exiting"), m(!1), window.setTimeout(m, T);
    }
    if (w > 0 && (u = setTimeout(p, w)), C) {
      const o = document.createElement("button");
      o.classList.add("svn-notification-close-button"), o.innerText = "X", o.addEventListener("click", p), e.appendChild(o);
    }
    const E = {
      id: l,
      timeoutID: u,
      contents: s,
      element: e,
      dismiss: p
    };
    return r.appendChild(e), c.set(l, E), E;
  }
  function x(s) {
    var d;
    if (a)
      throw new f();
    (d = c.get(s)) == null || d.dismiss();
  }
  function h() {
    if (a)
      throw new f();
    c.forEach((s) => s.dismiss());
  }
  function b() {
    if (a)
      throw new f();
    h(), r.remove(), a = !0;
  }
  return {
    activeNotifications: c,
    destroyed: a,
    createNotification: N,
    dismissNotification: x,
    dismissAllNotifications: h,
    destroy: b,
    element: r
  };
}
export {
  f as NotificationManagerDestroyedError,
  I as createNotificationManager,
  M as getNextNotificationID
};
